/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import init.ComboItem;
import init.MainClass;
import init.MyTableModel;

import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import utils.E_Airports;
import utils.HelperClass;
import core.Agent;
import core.Customer;
import core.Employee;
import core.Flight;
import exceptions.AddFlightToOrderExeption;

/**
 *The class represents the screen which enable users to add {@link core.FlightOrder } which link a {@link core.Order } class 
 and {@link core.Flight }
 
 * @author Matan
 */
public class AddFlightOrder extends MyInternalFrame {

    String[] columns = {"flight #", "Cost", "Stops", "departure", "arrival"};
    int selectFlightNumber;
    int savedlightNumber;

    /**
     * Creates new form AddFlightOrder
     *
     * @param title
     * @param type
     */
    public AddFlightOrder(String title, String type) {
        super(title, type);
        initComponents();
        fillCbAirports();
        btnOk.setToolTipText(utils.Constants.saveButtonToolTip);
        fillCustomers();
        String cust = null;
        if (cbCustomers.getModel().getSize() > 0) {
            cust = ((String)((ComboItem) cbCustomers.getSelectedItem()).getKey());
        }
        fillCustomerOrders(cust);
        if (cbOrders.getModel().getSize() <= 0) {
        	cbOrders.setEnabled(false);
            rbSelectOrder.setSelected(false);
            setControlState(rbSelectOrder, false);

            rbNewOrder.setSelected(true);
            setControlState(rbNewOrder, true);

            lblOrderNumErr.setText("Customer has no order, enter new number");
            lblOrderNumErr.setVisible(true);
        } else {
            rbSelectOrder.setSelected(true);
            setControlState(txtOrderNumber, false);

            lblOrderNumErr.setVisible(false);
        }
        lblNOFlights.setVisible(false);
        lblDatesErr.setVisible(false);
        jDateTo.setEnabled(ckbFilterDates.isSelected());
        jdateFrom.setEnabled(ckbFilterDates.isSelected());
        btnOk.setEnabled(false);
        btnAddTicket.setEnabled(false);
        if (selectedUserType.equals("Agent")) {
            CbEmployees.setVisible(false);
            lblAgents.setVisible(false);
        } else {
            CbEmployees.setVisible(true);
            lblAgents.setVisible(true);
            fillAgents();
        }

        ListSelectionModel selectionModel = tblFlights.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    tableRowMouseClicked(tblFlights);
                }
            }
        });

    }

    private void checkForOrders(boolean state) {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mainScroller = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbSource = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cbDestination = new javax.swing.JComboBox();
        btnSearch = new javax.swing.JButton();
        lblNOFlights = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jdateFrom = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jDateTo = new com.toedter.calendar.JDateChooser();
        ckbFilterDates = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlights = new javax.swing.JTable();
        lblDatesErr = new javax.swing.JLabel();
        actionPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtOrderNumber = new javax.swing.JTextField();
        btnOk = new javax.swing.JButton();
        lblAgents = new javax.swing.JLabel();
        CbEmployees = new javax.swing.JComboBox();
        lblCustomer = new javax.swing.JLabel();
        cbCustomers = new javax.swing.JComboBox();
        lblOrderNumErr = new javax.swing.JLabel();
        btnAddTicket = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cbOrders = new javax.swing.JComboBox();
        rbSelectOrder = new javax.swing.JRadioButton();
        rbNewOrder = new javax.swing.JRadioButton();
        btnFlightBack = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(587, 550));

        mainScroller.setBorder(null);

        jPanel1.setPreferredSize(new java.awt.Dimension(0, 0));

        jPanel2.setPreferredSize(new java.awt.Dimension(500, 126));

        jLabel2.setText("Select Destination:");

        cbSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSourceActionPerformed(evt);
            }
        });

        jLabel1.setText("Select source:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblNOFlights.setText("No flight were found");

        jLabel7.setText("From date:");

        jdateFrom.setDateFormatString("dd/MM/yyyy");
        jdateFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdateFromPropertyChange(evt);
            }
        });

        jLabel8.setText("To date:");

        jDateTo.setDateFormatString("dd/MM/yyyy");
        jDateTo.setMinSelectableDate(null);

        ckbFilterDates.setText("Filter Dates");
        ckbFilterDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbFilterDatesActionPerformed(evt);
            }
        });

        tblFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblFlights.setFillsViewportHeight(true);
        jScrollPane1.setViewportView(tblFlights);

        lblDatesErr.setText("Select dates or uncheck 'filter dates' option");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ckbFilterDates)
                        .addGap(18, 18, 18)
                        .addComponent(lblDatesErr)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblNOFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSearch))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jdateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbSource, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbDestination, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jDateTo, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))))
                        .addGap(47, 47, 47))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cbDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbFilterDates)
                    .addComponent(lblDatesErr))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jdateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addGap(6, 6, 6)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNOFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setText("Order number:");

        btnOk.setText("Submit");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        lblAgents.setText("Select agent:");

        lblCustomer.setText("Select cutomer:");

        cbCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCustomersActionPerformed(evt);
            }
        });

        btnAddTicket.setText("Add ticket");
        btnAddTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTicketActionPerformed(evt);
            }
        });

        jLabel3.setText("Selet order:");

        cbOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOrdersActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbSelectOrder);
        rbSelectOrder.setText("Existing order");
        rbSelectOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSelectOrderActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbNewOrder);
        rbNewOrder.setText("New");
        rbNewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNewOrderActionPerformed(evt);
            }
        });

        btnFlightBack.setText("Best flight back");
        btnFlightBack.setEnabled(false);
        btnFlightBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlightBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(actionPanelLayout.createSequentialGroup()
                                .addComponent(lblAgents)
                                .addGap(18, 18, 18)
                                .addComponent(CbEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(lblCustomer)
                                .addGap(18, 18, 18)
                                .addComponent(cbCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(actionPanelLayout.createSequentialGroup()
                                .addComponent(rbSelectOrder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbNewOrder)))
                        .addContainerGap(74, Short.MAX_VALUE))
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbOrders, 0, 113, Short.MAX_VALUE)
                            .addComponent(txtOrderNumber))
                        .addGap(18, 18, 18)
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrderNumErr, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(actionPanelLayout.createSequentialGroup()
                                .addComponent(btnOk)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAddTicket)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFlightBack)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAgents)
                    .addComponent(CbEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCustomer)
                    .addComponent(cbCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSelectOrder)
                    .addComponent(rbNewOrder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOrderNumErr, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnOk)
                                .addComponent(btnAddTicket)
                                .addComponent(btnFlightBack))
                            .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(cbOrders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainScroller.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSourceActionPerformed
        // TODO add your handling code here:
        if (cbSource.getModel().getSize() <= 0) {
            return;
        }
        String name = ((String)((ComboItem) cbSource.getSelectedItem()).getKey());
        E_Airports airPort = E_Airports.valueOf(name);
        ArrayList<E_Airports> list = new ArrayList<E_Airports>();
        list.add(airPort);
        HelperClass.fillAirportsCombo(this, cbDestination, list);
    }//GEN-LAST:event_cbSourceActionPerformed

    private void jdateFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdateFromPropertyChange
        // TODO add your handling code here:

        if ("date".equals(evt.getPropertyName())) {
            String s = evt.getPropertyName();

            Date d;
            d = (Date) evt.getNewValue();

            jDateTo.setDate(d);
            jDateTo.setMinSelectableDate(d);

        }
    }//GEN-LAST:event_jdateFromPropertyChange

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        getFlightResult();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void ckbFilterDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbFilterDatesActionPerformed
        // TODO add your handling code here:
        jDateTo.setEnabled(ckbFilterDates.isSelected());
        jdateFrom.setEnabled(ckbFilterDates.isSelected());
        lblDatesErr.setVisible(false);
    }//GEN-LAST:event_ckbFilterDatesActionPerformed

    /**
     * @param evt
     * @exception {@ link exceptions.AddFlightToOrderExeption}
     */
    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        // TODO add your handling code here:
        saveChanges();
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnAddTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTicketActionPerformed
        // TODO add your handling code here:
        if (cbCustomers.getModel().getSize() <= 0) {
            return;
        }
       
        int orderNum = -1;
        if (rbNewOrder.isSelected() && txtOrderNumber.getText().trim().length() > 0) {
            orderNum = Integer.parseInt(txtOrderNumber.getText());

        } else if (rbSelectOrder.isSelected() && cbCustomers.getModel().getSize() > 0) {
            orderNum = Integer.parseInt((String)((ComboItem) cbOrders.getSelectedItem()).getKey());
        } else {
            return;
        }

        
        Flight f = MainClass.getIfly().getFlights().get(savedlightNumber);
        String customerPassport = ((String)((ComboItem) cbCustomers.getSelectedItem()).getKey());
        ViewFlightTickets ticketFrame = new ViewFlightTickets("View Flight Ticket - Flight No. " + savedlightNumber, selectedUserType, this, f, orderNum, customerPassport);
        OpenChildWindow(ticketFrame);

    }//GEN-LAST:event_btnAddTicketActionPerformed

    private void OpenChildWindow(MyInternalFrame windowToOpen) {
        JDesktopPane desk = this.getDesktopPane();

        if (desk != null) {
            JInternalFrame[] frames = desk.getAllFrames();
            for (JInternalFrame frame : frames) {
                if (frame.getTitle().equals(title)) {
                    MyInternalFrame theFrame = (MyInternalFrame) frame;
                    theFrame.changeWindowButtons(false);

                    theFrame.setGlassPane(theFrame.getDisabledGlassPane());
                    theFrame.getDisabledGlassPane().activate("Please wait");
                }
            }

            windowToOpen.setVisible(true);

            child = windowToOpen;
            try {
                desk.add(child);
                child.setSelected(true);

            } catch (java.beans.PropertyVetoException e) {
            }

        }
    }

    private void cbOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOrdersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbOrdersActionPerformed

    private void rbSelectOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSelectOrderActionPerformed
        // TODO add your handling code here:
        JRadioButton choice = (JRadioButton) evt.getSource();
        if (choice != null && choice.isSelected()) {
            setControlState(txtOrderNumber, false);
            setControlState(cbOrders, true);
            lblOrderNumErr.setVisible(false);
        }
    }//GEN-LAST:event_rbSelectOrderActionPerformed

    private void rbNewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNewOrderActionPerformed
        // TODO add your handling code here:

        JRadioButton choice = (JRadioButton) evt.getSource();
        if (choice != null && choice.isSelected()) {
            setControlState(cbOrders, false);
            setControlState(txtOrderNumber, true);
            lblOrderNumErr.setVisible(false);
        }
    }//GEN-LAST:event_rbNewOrderActionPerformed

    private void cbCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCustomersActionPerformed
        // TODO add your handling code here:
        String cust;
        cust = ((String)((ComboItem) cbCustomers.getSelectedItem()).getKey());
        fillCustomerOrders(cust);
        btnAddTicket.setEnabled(false);
        btnOk.setEnabled(false);
        tblFlights.clearSelection();
        if (cbOrders.getModel().getSize() <= 0) {
            rbSelectOrder.setSelected(false);
            setControlState(rbSelectOrder, false);
            setControlState(cbOrders, false);

            rbNewOrder.setSelected(true);

            setControlState(txtOrderNumber, true);

            lblOrderNumErr.setText("Customer has no order, enter new number");
            lblOrderNumErr.setForeground(Color.RED);
            lblOrderNumErr.setVisible(true);
        } else {
            rbSelectOrder.setSelected(true);
            setControlState(rbSelectOrder, true);
            setControlState(cbOrders, true);
            setControlState(txtOrderNumber, false);

            lblOrderNumErr.setVisible(false);
        }
    }//GEN-LAST:event_cbCustomersActionPerformed

    private void btnFlightBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlightBackActionPerformed
        // TODO add your handling code here:

        //Find The Best Flight Back
        ViewQueries flightBack = new ViewQueries("Find The Best Flight Back", selectedUserType,this, savedlightNumber);
        OpenChildWindow(flightBack);
    }//GEN-LAST:event_btnFlightBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CbEmployees;
    private javax.swing.JPanel actionPanel;
    private javax.swing.JButton btnAddTicket;
    private javax.swing.JButton btnFlightBack;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbCustomers;
    private javax.swing.JComboBox cbDestination;
    private javax.swing.JComboBox cbOrders;
    private javax.swing.JComboBox cbSource;
    private javax.swing.JCheckBox ckbFilterDates;
    private com.toedter.calendar.JDateChooser jDateTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdateFrom;
    private javax.swing.JLabel lblAgents;
    private javax.swing.JLabel lblCustomer;
    private javax.swing.JLabel lblDatesErr;
    private javax.swing.JLabel lblNOFlights;
    private javax.swing.JLabel lblOrderNumErr;
    private javax.swing.JScrollPane mainScroller;
    private javax.swing.JRadioButton rbNewOrder;
    private javax.swing.JRadioButton rbSelectOrder;
    private javax.swing.JTable tblFlights;
    private javax.swing.JTextField txtOrderNumber;
    // End of variables declaration//GEN-END:variables

    private void fillCbAirports() {

        HelperClass.fillAirportsCombo(this, cbSource, null);
        if (cbSource.getModel().getSize() <= 0) {
            return;
        }
        String name = ((String)((ComboItem) cbSource.getSelectedItem()).getKey());
        E_Airports airPort = E_Airports.valueOf(name);
        ArrayList<E_Airports> list = new ArrayList<E_Airports>();
        list.add(airPort);
        HelperClass.fillAirportsCombo(this, cbDestination, list);
    }

    private void fillAgents() {

        Map<Integer, Employee> emps = MainClass.getIfly().getEmployees();
        if (emps.isEmpty()) {
            return;
        }

        List<ComboItem> tempData = new ArrayList<ComboItem>();
        for (Map.Entry<Integer, Employee> entry : emps.entrySet()) {
            Integer integer = entry.getKey();
            Employee employee = entry.getValue();
            if (employee instanceof Agent) {
                tempData.add(new ComboItem(integer.toString(), employee.getFirstName() + " " + employee.getLastName()));
            }
        }

        ComboItem[] items = tempData.toArray(new ComboItem[tempData.size()]);
        CbEmployees.setModel(new DefaultComboBoxModel(items));

    }

    private void fillCustomers() {
        Map<String, Customer> customers = MainClass.getIfly().getCustomers();
        if (customers.isEmpty()) {
            return;
        }
        List<ComboItem> tempData = new ArrayList<ComboItem>();

        int idx = 0;
        for (Map.Entry<String, Customer> entry : customers.entrySet()) {

            tempData.add(new ComboItem(entry.getKey(), entry.getValue().getFirstName() + " " + entry.getValue().getLastName()));

        }

        ComboItem[] items = tempData.toArray(new ComboItem[tempData.size()]);
        cbCustomers.setModel(new DefaultComboBoxModel(items));

    }

    private void getFlightResult() {
        //int agentNum, customerNum;
        E_Airports source, destination;
        Date fromDate, toDate;
        toDate = null;
        fromDate = null;
        if (cbSource.getModel().getSize() <= 0 || cbDestination.getModel().getSize() <= 0) {
            return;
        }
        source = E_Airports.valueOf((String)((ComboItem) cbSource.getSelectedItem()).getKey());
        destination = E_Airports.valueOf((String)((ComboItem) cbDestination.getSelectedItem()).getKey());

        if (ckbFilterDates.isSelected()) {
            fromDate = jdateFrom.getDate();
            toDate = jDateTo.getDate();
            if (fromDate == null || toDate == null) {
                lblDatesErr.setVisible(true);
                lblDatesErr.setForeground(Color.red);
                return;
            }
        }
        btnOk.setEnabled(false);
        btnAddTicket.setEnabled(false);
        btnFlightBack.setEnabled(false);
        lblDatesErr.setVisible(false);
        DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
        Map<Integer, Flight> flights = MainClass.getIfly().getSearchedFlights(source, destination, fromDate, toDate);
        ArrayList<Object[]> tempData = new ArrayList<Object[]>();
        MyTableModel tableModel = null;
        DefaultTableModel dfModel = null;
        for (Map.Entry<Integer, Flight> entry : flights.entrySet()) {
            Integer integer = entry.getKey();
            Flight flight = entry.getValue();

            tempData.add(new Object[]{integer, flight.getFlightCost(),
                flight.getStops().size(),
                outputFormatter.format(flight.getFlightDateAndTimeSource()),
                outputFormatter.format(flight.getFlightDateAndTimeDestination())});
        }
        if (tempData.size() > 0) {
            tableModel = new MyTableModel(columns, tempData, null);
            tblFlights.setModel(tableModel);
            lblNOFlights.setVisible(false);
            HelperClass.aligmentCell(tblFlights);
        } else {
            dfModel = new DefaultTableModel(columns, 0);
            tblFlights.setModel(dfModel);
            lblNOFlights.setVisible(true);
        }

    }

    private void tableRowMouseClicked(JTable table) {

        int numRows = table.getRowCount();
        TableModel model = table.getModel();
        for (int i = 0; i < numRows; i++) {
            if (table.getSelectedRow() == i) {
                btnOk.setEnabled(true);
                selectFlightNumber = Integer.parseInt(model.getValueAt(i, 0).toString());
                double cost = Double.parseDouble(model.getValueAt(i, 2).toString());
            }
        }
    }

    /**
     * save action on {@link #btnOk} action perform 
     */
    private void saveChanges() {
        if (!selectedUserType.equals("Admin") && MainClass.getUserData() == null) {
            shoMissingDataMsg("Agnet Data is missing");
            return;
        }

        if (selectedUserType.equals("Admin")) {
            if (CbEmployees.getModel().getSize() <= 0 || cbCustomers.getModel().getSize() <= 0) {
                shoMissingDataMsg("Agnets or customers are missing");
                return;
            }
        }

        boolean result = true;
        JLabel[] arry = {lblDatesErr, lblOrderNumErr};
        Date from, to;
        String tempErr = null;
        if (ckbFilterDates.isSelected()) {
            from = jdateFrom.getDate();
            to = jDateTo.getDate();
            if (from == null || to == null) {
                result = false;
                lblDatesErr.setVisible(true);
            }
        }
        if (rbNewOrder.isSelected()) {
            if (txtOrderNumber.getText() == null || txtOrderNumber.getText().length() == 0) {
                tempErr = "Value cant be empty";
            } else {
                tempErr = HelperClass.getErrMsg(txtOrderNumber.getText(), "Number");
            }
        } else {
            if (cbOrders.getModel().getSize() <= 0) {
                tempErr = "cant retrive order number";
            }
        }

        if (tempErr != null) {
            result = false;
            lblOrderNumErr.setText(tempErr);
            lblOrderNumErr.setForeground(Color.red);
            lblOrderNumErr.setVisible(true);
        } else {
            lblOrderNumErr.setText("");
            lblOrderNumErr.setVisible(false);
        }

        if (result) {
            int agentNumber;

            if (selectedUserType.equals("Agent")) {
                agentNumber = ((Agent) MainClass.getUserData().getValue()).getEmployeeNumber();
            } else {

                agentNumber = Integer.parseInt((String)((ComboItem) CbEmployees.getSelectedItem()).getKey());
            }

            String customerPassport = ((String)((ComboItem) cbCustomers.getSelectedItem()).getKey());
            int orderNumber = 0;
            if (rbNewOrder.isSelected()) {
                orderNumber = Integer.parseInt(txtOrderNumber.getText());
            } else if (rbSelectOrder.isSelected()) {
                orderNumber = Integer.parseInt((String)((ComboItem) cbOrders.getSelectedItem()).getKey());
            }

            int flightNumber = selectFlightNumber;

            try {
                MainClass.getIfly().addFlightToOrder(agentNumber, customerPassport, orderNumber, flightNumber);
                int restult = JOptionPane.showInternalConfirmDialog(this, "Saved changes", "Confirmation", JOptionPane.PLAIN_MESSAGE, JOptionPane.INFORMATION_MESSAGE);
                btnAddTicket.setEnabled(true);
                btnFlightBack.setEnabled(true);
                fillCustomerOrders(customerPassport);
                rbSelectOrder.setEnabled(true);
                setIflyState(false);
                savedlightNumber = selectFlightNumber;
                //JOptionPane.showInternalConfirmDialog(this, "Saved changes", "Confirmation", JOptionPane.PLAIN_MESSAGE, JOptionPane.INFORMATION_MESSAGE);
            } catch (AddFlightToOrderExeption ex) {
                //JOptionPane.showInternalConfirmDialog(this, ex.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
                JOptionPane.showInternalConfirmDialog(this, ex.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);

            }
        }

    }

    private void setControlState(JComponent comp, boolean state) {
        comp.setEnabled(state);
    }

    private void fillCustomerOrders(String customer) {
        Customer c = MainClass.getIfly().getCustomers().get(customer);
        HelperClass.fillOrdersCombo(this, cbOrders, c);
    }
}
