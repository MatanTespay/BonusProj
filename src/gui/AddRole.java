/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import init.InputValidator;
import init.MainClass;
import static init.MainClass.con;
import init.MyTableModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.PlainDocument;
import utils.InputType;
import utils.Queries;

/**
 *
 * @author Matan
 */
public class AddRole extends MyInternalFrame {

    String[] TableColumns = {
        "# Role",
        "RoleName"};
    
    int lastIndx = -1;
    PreparedStatement stmt;
    ResultSet rs;
    String q;
    int editedRiwIdx;

    /**
     * Creates new form AddRole
     *
     * @param title
     * @param type
     */
    public AddRole(String title, String type) {
        super(title, type);
        initComponents();
        buidForm();
    }

    private void buidForm() {

        txtRoleName.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                btnSave.setEnabled(isOkToSave());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {

                btnSave.setEnabled(isOkToSave());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }

        });
        PlainDocument nameDoc = (PlainDocument) txtRoleName.getDocument();
        nameDoc.setDocumentFilter(new utils.MyDocFilter(InputType.TEXT50));

        super.validators = new ArrayList<InputValidator>() {
            {
                add(new InputValidator(txtRoleName, utils.InputType.ROLE, lblErrRoleName, null));
            }
        };
        btnRemove.setEnabled(false);
        btnEdit.setEnabled(false);
        setMode(utils.Constants.EDIT_MODE);
        FillTable();
        setTableSelection();

    }

    private boolean isOkToSave() {
        if (txtRoleName.getText().isEmpty()) {
            btnSave.setToolTipText("The Role name cant be empty");
            return false;
        }
        
        if ( txtRoleName.getText().length() > 50) {
            btnSave.setToolTipText("The Role name can oly have 50 Characters");
            return false;
        }
        
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblRoleName = new javax.swing.JLabel();
        txtRoleName = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        lblErrRoleName = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoles = new javax.swing.JTable();

        lblRoleName.setText("Role Name:");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblErrRoleName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(lblRoleName)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtRoleName, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRoleName)
                    .addComponent(txtRoleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblErrRoleName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRemove)
                        .addComponent(btnEdit))
                    .addComponent(btnSave))
                .addGap(0, 15, Short.MAX_VALUE))
        );

        tblRoles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblRoles);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setTableSelection() {
        ListSelectionModel selectionModel = tblRoles.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    tableSelection();
                }
            }

            private void tableSelection() {
                btnRemove.setEnabled(true);
                btnEdit.setEnabled(true);
            }
        });
    }
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (evt.getActionCommand().equals("Edit")) {
            Edit();
        } else {
            Save();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void Save() {
        boolean result;
        result = super.isInputOk();
        if (result) {
            try {

                stmt = con.prepareStatement(Queries.SELECT_ROLE_ID_OF_ROLE_BY_NAME,
                        ResultSet.TYPE_SCROLL_SENSITIVE,
                        ResultSet.CONCUR_UPDATABLE);
                stmt.setString(1, txtRoleName.getText());

                rs = stmt.executeQuery();
                if (rs.next()) {
                    //role already exist
                    JOptionPane.showMessageDialog(this,
                            "Role name alredy exist",
                            "Error Message",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    //adding new role

                    stmt = con.prepareStatement(Queries.INSERT_ROLE);

                    if (tblRoles.getRowCount() == 0) {
                        lastIndx = 1;
                    }

                    stmt.setInt(1, lastIndx + 1);
                    stmt.setString(2, txtRoleName.getText());

                    stmt.executeUpdate();
                    txtRoleName.setText("");
                    FillTable();

                }

            } catch (SQLException ex) {
                Logger.getLogger(Station.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void Remove() {
        try {
            editedRiwIdx = tblRoles.getSelectedRow();

            stmt = MainClass.con.prepareStatement(Queries.DELETE_ROLE);
            int index = Integer.parseInt(tblRoles.getModel().getValueAt(editedRiwIdx, 0).toString());

            stmt.setInt(1, index);

            stmt.executeUpdate();

            FillTable();

            btnEdit.setEnabled(false);
            btnRemove.setEnabled(false);
        } catch (SQLException ex) {
            String msg = ex.getMessage();
            if (ex.getErrorCode() == 2627) { // 2627 is unique constraint (includes primary key), 2601 is unique index
                msg = "This User Name alredy exit!";
            }
            JOptionPane.showInternalConfirmDialog(this, msg,
                    "Error", JOptionPane.PLAIN_MESSAGE,
                    JOptionPane.ERROR_MESSAGE);

            Logger.getLogger(Users.class.getName()).log(Level.SEVERE, null, ex);

        }

        JOptionPane.showMessageDialog(this,
                "Changes Saved",
                "INFORMATION MESSAGE",
                JOptionPane.INFORMATION_MESSAGE);
        btnSave.setActionCommand("");
    }

    private void Edit() {
        boolean result = super.isInputOk();;

        if (result) {
            try {
                stmt = con.prepareStatement(Queries.UPDATE_ROLE,
                        ResultSet.TYPE_SCROLL_SENSITIVE,
                        ResultSet.CONCUR_UPDATABLE);

                //set params
                String newName = txtRoleName.getText();
                //String oldName = (String) tblRoles.getModel().getValueAt(editedRiwIdx, 1);
                int index = Integer.parseInt(tblRoles.getModel().getValueAt(editedRiwIdx, 0).toString());

                stmt.setString(1, newName);
                stmt.setInt(2, index);

                stmt.executeUpdate();

                FillTable();

                btnEdit.setEnabled(false);
                btnRemove.setEnabled(false);
                txtRoleName.setText("");
            } catch (SQLException ex) {
                String msg = ex.getMessage();
                if (ex.getErrorCode() == 2627) { // 2627 is unique constraint (includes primary key), 2601 is unique index
                    msg = "This User Name alredy exit!";
                }
                JOptionPane.showInternalConfirmDialog(this, msg,
                        "Error", JOptionPane.PLAIN_MESSAGE,
                        JOptionPane.ERROR_MESSAGE);

                Logger.getLogger(Users.class.getName()).log(Level.SEVERE, null, ex);
            }

            JOptionPane.showMessageDialog(this,
                    "Changes Saved",
                    "INFORMATION MESSAGE",
                    JOptionPane.INFORMATION_MESSAGE);
            btnSave.setActionCommand("");
        }
    }

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        editedRiwIdx = tblRoles.getSelectedRow();
        btnRemove.setEnabled(false);
        String name = (String) (tblRoles.getModel().getValueAt(tblRoles.getSelectedRow(), 1));
        txtRoleName.setText(name);
        btnSave.setActionCommand("Edit");

    }//GEN-LAST:event_btnEditActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        Remove();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void FillTable() {

        try {

            stmt = con.prepareStatement(Queries.SELECT_ALL_ROLES,
                    ResultSet.TYPE_SCROLL_SENSITIVE,
                    ResultSet.CONCUR_UPDATABLE);
            rs = stmt.executeQuery();
            ArrayList<Object[]> rows = new ArrayList();
            while (rs.next()) {
                Object[] row = {rs.getString("RoleID"), rs.getString("RoleName")};
                rows.add(row);
            }

            rs.last();
            lastIndx = rs.getInt("RoleID");

            MyTableModel tableModel = new MyTableModel(this.TableColumns, rows, null);
            tblRoles.setModel(tableModel);
            closeResource();

        } catch (SQLException ex) {
            Logger.getLogger(Station.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void closeResource() throws SQLException {
        rs.close();
        stmt.close();
        q = null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblErrRoleName;
    private javax.swing.JLabel lblRoleName;
    private javax.swing.JTable tblRoles;
    private javax.swing.JTextField txtRoleName;
    // End of variables declaration//GEN-END:variables

}
