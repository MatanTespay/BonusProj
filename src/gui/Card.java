/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import utils.QueryCombobox;
import init.ComboItem;
import init.MainClass;
import static init.MainClass.con;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Blob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import utils.Column;
import static utils.Constants.ADD_MODE;
import static utils.Constants.EDIT_MODE;
import static utils.Constants.OYSTER;
import static utils.Constants.PAPER;
import utils.CustomTableModel;
import utils.HelperClass;
import utils.Queries;

/**
 *
 * @author asus
 */
public class Card extends MyInternalFrame {

    private long cardNumber;
    private boolean cardType;
    private ImageIcon picture;
    private JFileChooser picFileChooser;
    private boolean isTourist;

    /**
     * Creates new form Card
     *
     * @param title
     * @param type
     * @param cardNumber
     * @param purchaseDate
     */
    public Card(String title, String type, long cardNumber, Timestamp purchaseDate) {
        super(title, type);
        setMode(EDIT_MODE);
        this.cardNumber = cardNumber;
        setVariables();
        buildForm();
        setDefaults();
    }

    public Card(String title, String type) {
        super(title, type);
        setMode(ADD_MODE);
        buildForm();
        tfCardNumber.setText("(auto number)");
        this.cardNumber = 0;
    }

    private void buildForm() {
        initComponents();
        try {

            picFileChooser = new JFileChooser();

            // set model to comboboxes
            PreparedStatement getAllCardLengths = con.prepareStatement("SELECT * FROM tblCardLengths");
            PreparedStatement getAllZones = con.prepareStatement("SELECT * FROM tblZone");

            cmbLength.setModel(new QueryCombobox(cmbLength, Character.class, getAllCardLengths));
            cmbZone.setModel(new QueryCombobox(cmbZone, Byte.class, getAllZones));

            // set visibility and enablement
            setActiveness();

        } catch (SQLException ex) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pDetails = new javax.swing.JPanel();
        lblCardNumber = new javax.swing.JLabel();
        lblType = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        chbIsTourist = new javax.swing.JCheckBox();
        btnBrowse = new javax.swing.JButton();
        lblPicture = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        tfCardNumber = new javax.swing.JTextField();
        pPrograms = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrograms = new javax.swing.JTable();
        lblZone = new javax.swing.JLabel();
        lblLength = new javax.swing.JLabel();
        cmbZone = new javax.swing.JComboBox();
        cmbLength = new javax.swing.JComboBox();
        btnRemoveProgram = new javax.swing.JButton();
        btnAddProgram = new javax.swing.JButton();

        pDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        lblCardNumber.setText("Card Number");

        lblType.setText("Type");

        cmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Paper", "Oyster" }));
        cmbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTypeActionPerformed(evt);
            }
        });

        chbIsTourist.setText("Tourist");
        chbIsTourist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbIsTouristActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse Image");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pDetailsLayout = new javax.swing.GroupLayout(pDetails);
        pDetails.setLayout(pDetailsLayout);
        pDetailsLayout.setHorizontalGroup(
            pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pDetailsLayout.createSequentialGroup()
                                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCardNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pDetailsLayout.createSequentialGroup()
                                        .addComponent(lblType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(48, 48, 48)))
                                .addGap(24, 24, 24)
                                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(tfCardNumber, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(pDetailsLayout.createSequentialGroup()
                                .addComponent(chbIsTourist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(193, 193, 193)))
                        .addGap(32, 32, 32)
                        .addComponent(lblPicture, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnBrowse)))
                .addContainerGap())
        );
        pDetailsLayout.setVerticalGroup(
            pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDetailsLayout.createSequentialGroup()
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addComponent(lblPicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowse)
                        .addGap(21, 21, 21))
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pDetailsLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblCardNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(tfCardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbType)
                            .addGroup(pDetailsLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(chbIsTourist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(69, 69, 69)))
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pPrograms.setBorder(javax.swing.BorderFactory.createTitledBorder("Programs"));

        tblPrograms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblPrograms);

        lblZone.setText("Zone");

        lblLength.setText("Length");

        cmbZone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbLength.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnRemoveProgram.setText("Remove");
        btnRemoveProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveProgramActionPerformed(evt);
            }
        });

        btnAddProgram.setText("Add");
        btnAddProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProgramActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pProgramsLayout = new javax.swing.GroupLayout(pPrograms);
        pPrograms.setLayout(pProgramsLayout);
        pProgramsLayout.setHorizontalGroup(
            pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pProgramsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pProgramsLayout.createSequentialGroup()
                        .addComponent(btnRemoveProgram)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddProgram))
                    .addGroup(pProgramsLayout.createSequentialGroup()
                        .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLength)
                            .addComponent(lblZone, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbLength, 0, 100, Short.MAX_VALUE)
                            .addComponent(cmbZone, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pProgramsLayout.setVerticalGroup(
            pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pProgramsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pProgramsLayout.createSequentialGroup()
                        .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pProgramsLayout.createSequentialGroup()
                                .addComponent(cmbZone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbLength))
                            .addGroup(pProgramsLayout.createSequentialGroup()
                                .addComponent(lblZone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(6, 6, 6)
                                .addComponent(lblLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(38, 38, 38)
                        .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddProgram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemoveProgram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pPrograms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pPrograms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        int o = picFileChooser.showOpenDialog(this);
        if (o == JFileChooser.APPROVE_OPTION) {
            try {
                File f = picFileChooser.getSelectedFile();
                Path p = f.toPath();
                byte[] b = Files.readAllBytes(p);
                ImageIcon icon = getScaledImage(b);
                lblPicture.setIcon(icon);
                this.picture = icon;
            } catch (IOException ex) {
                Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnAddProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProgramActionPerformed
        ComboItem zoneItem;
        ComboItem lengthItem;
        byte zone;
        char length;

        zoneItem = (ComboItem) cmbZone.getSelectedItem();
        lengthItem = (ComboItem) cmbLength.getSelectedItem();
        zone = Byte.parseByte(zoneItem.getKey().toString());
        length = lengthItem.getKey().toString().charAt(0);

        // check if the program already exists and did not expire
        ArrayList<Object[]> programs = ((CustomTableModel) tblPrograms.getModel()).getData();
        for (Object[] program : programs) {

            Timestamp tblExpiration = (Timestamp) program[3];
            byte tblZone = Byte.parseByte(program[4].toString());
            char tblLength = program[5].toString().charAt(0);

            if (tblZone == zone && tblLength == length
                    && tblExpiration.after(new java.util.Date())) {
                // program already exists and did not expire
                JOptionPane.showInternalMessageDialog(this,
                        "You already have this program ant it did not expire yet! Why pay twice?",
                        "Bummer!",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // the card does not have this program or it has already expired
        try {
            PreparedStatement getCard = con.prepareStatement(Queries.SELECT_CARD);
            getCard.setLong(1, cardNumber);
            getCard.setTimestamp(2, getToday());

            if (getCard.executeQuery().isBeforeFirst()) {
                // the card was already loaded with a program today, therefore the new program will be added to it

                if (getMode() == ADD_MODE) {
                    // the card does not exist yeat in DB, therefore data table will be UNBOUNDED to DB
                    ((CustomTableModel) tblPrograms.getModel())
                            .addRow(new Object[]{"#", getToday(), HelperClass.getExpirationDate(getToday(), length), zone, length});
                    handleAddProgramSuccess();

                } else {
                    // edit mode - the card exists, therefore the data table will be inserted to DB
                    PreparedStatement insertProgram;
                    insertProgram = (cardType == PAPER) ? con.prepareStatement(Queries.INSERT_PAPER_PROGRAM)
                            : con.prepareStatement(Queries.INSERT_OYSTER_PROGRAM);

                    insertProgram.setLong(1, cardNumber);
                    insertProgram.setTimestamp(2, getToday());
                    insertProgram.setByte(3, zone);
                    insertProgram.setString(4, String.valueOf(length));

                    ((CustomTableModel) tblPrograms.getModel()).fillTable();
                    handleAddProgramSuccess();
                }
            } else {
                // the card was not loaded with a program today, therefore the new program will be added a new card

                // insert a new temp UNBOUND row to the table
                ((CustomTableModel) tblPrograms.getModel())
                        .addRow(new Object[]{"#", getToday(), HelperClass.getExpirationDate(getToday(), length), zone, length});

                insertNewCard();
            }

        } catch (SQLException ex) {

        }
    }//GEN-LAST:event_btnAddProgramActionPerformed

    private void btnRemoveProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveProgramActionPerformed

        int selectedRow = tblPrograms.getSelectedRow();
        CustomTableModel tblModel = ((CustomTableModel) tblPrograms.getModel());

        if (getMode() == ADD_MODE) {
            // add mode - the table is UNBOUNDED to the DB
            tblModel.removeRow(selectedRow);
 
        } else {
            // view mode - the table is BOUNDED to the DB
            PreparedStatement deleteProgram;
            
            // get row data from table
            Object[] row = tblModel.getRow(selectedRow);
            Timestamp rowCardPurchaseDate = (Timestamp) row[1];
            byte rowZoneNumber = Byte.valueOf(row[3].toString());
            char rowCardLength = row[3].toString().charAt(0);

            try {
                deleteProgram = (cardType == PAPER) ? con.prepareStatement(Queries.DELETE_PAPER_PROGRAM)
                        : con.prepareStatement(Queries.DELETE_OYSTER_PROGRAM);
                deleteProgram.setLong(1, this.cardNumber);
                deleteProgram.setTimestamp(2, rowCardPurchaseDate);
                deleteProgram.setByte(3, rowZoneNumber);
                deleteProgram.setString(4, String.valueOf(rowCardLength));
            } catch (SQLException e) {
                System.err.println("Error code: " + e.getErrorCode() + "\nError Message: " + e.getMessage());
            }
        }
        // disable save button if the card has no programs
        btnSave.setEnabled(tblPrograms.getRowCount() == 0);
        
        JOptionPane.showInternalMessageDialog(this,
                    "The program was removed successfully! So why the hell did "
                            + "you choose it in the first place?",
                    "Hooray!",
                    JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnRemoveProgramActionPerformed

    private void chbIsTouristActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbIsTouristActionPerformed
        this.isTourist = chbIsTourist.isSelected();
    }//GEN-LAST:event_chbIsTouristActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
//        cancel();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        insertNewCard();

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cmbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTypeActionPerformed
        String strType = (String) cmbType.getSelectedItem();
        this.cardType = (strType.equals("Oyster")) ? OYSTER : PAPER;
        modifyFormToCardType();
    }//GEN-LAST:event_cmbTypeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProgram;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRemoveProgram;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chbIsTourist;
    private javax.swing.JComboBox cmbLength;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JComboBox cmbZone;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCardNumber;
    private javax.swing.JLabel lblLength;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JLabel lblType;
    private javax.swing.JLabel lblZone;
    private javax.swing.JPanel pDetails;
    private javax.swing.JPanel pPrograms;
    private javax.swing.JTable tblPrograms;
    private javax.swing.JTextField tfCardNumber;
    // End of variables declaration//GEN-END:variables

    private void setProgramTableModel() {

        ArrayList<Column> cols = new ArrayList<>();
        cols.add(new Column("#", "#", Integer.class)); //*UNBOUND to DB - displays row num*/
        cols.add(new Column("Purchase date", "cardPurchaseDate", Timestamp.class));
        cols.add(new Column("Expiration date", "expirationDate", Timestamp.class));
        cols.add(new Column("Zone", "zoneNumber", Byte.class));
        cols.add(new Column("Length", "cardLength", Character.class));

        PreparedStatement getAllPrograms;
        CustomTableModel programTblModel;

        try {
            getAllPrograms = (this.cardType == PAPER)
                    ? con.prepareStatement(Queries.SELECT_PAPER_PROGRAMS)
                    : con.prepareStatement(Queries.SELECT_OYSTER_PROGRAMS);

            getAllPrograms.setLong(1, this.cardNumber);

            programTblModel = new CustomTableModel(tblPrograms, cols, getAllPrograms);

            HashSet<JButton> tableButtons = new HashSet<>();
            tableButtons.add(btnRemoveProgram);
            programTblModel.bindButtons(tableButtons);

            tblPrograms.setModel(programTblModel);
            programTblModel.fillTable();

            btnDelete.setEnabled(isOkToDelete());
        } catch (SQLException ex) {

        }
    }

    private void setDefaults() {

        cmbType.setSelectedItem((this.cardType == PAPER) ? "Paper" : "Oyster");
        // TODO: get picture from DB

        if (this.cardType == OYSTER) {
            lblPicture.setIcon(this.picture);
        } else {
            // paper
            chbIsTourist.setSelected(this.isTourist);
        }
    }

    private Image scaleIamge(Image img, int w, int h) {

        BufferedImage resizeImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = resizeImage.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
        g.drawImage(img, 0, 0, w, h, null);
        g.dispose();
        return resizeImage;

    }

    private ImageIcon getScaledImage(byte[] blobAsBytes) {
        try {
            BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(blobAsBytes));
            if (bufferedImage != null) {
                ImageIcon resized = new ImageIcon(scaleIamge(bufferedImage, 120, 110));

                return resized;
            }
            return null;
        } catch (IOException ex) {
            Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    private static BufferedImage getBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }

        BufferedImage bimage = new BufferedImage(img.getWidth(null),
                img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        return bimage;
    }

    private static Timestamp getToday() {
        java.util.Date now = new java.util.Date();
        return new Timestamp(now.getYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);
    }

    private void setPrograms(PreparedStatement st, long cardNumber) throws SQLException {
        ArrayList<Object[]> programs = ((CustomTableModel) tblPrograms.getModel()).getData();

        for (Object[] program : programs) {

            byte zoneNumber = Byte.parseByte(program[3].toString());
            char length = program[4].toString().charAt(0);

            st.setLong(1, cardNumber);
            st.setTimestamp(2, getToday());
            st.setByte(3, zoneNumber);
            st.setString(4, String.valueOf(length));
            if (cardType == OYSTER) {
                st.addBatch();
            }
        }
    }

    private void setVariables() {
        PreparedStatement st;
        ResultSet rs;
        try {
            st = con.prepareStatement(Queries.SELECT_OYSTER_PICTURE);
            st.setLong(1, cardNumber);

            rs = st.executeQuery();

            if (rs.isBeforeFirst()) {
                // result set not empty - the card is Oyster

                rs.next();
                this.cardType = OYSTER;

                Blob blob = rs.getBlob("picture");
                int blobLength = (int) blob.length();
                byte[] blobAsBytes = blob.getBytes(1, blobLength);
                this.picture = getScaledImage(blobAsBytes);

            } else {
                // result set is empty - the card is Paper
                st = con.prepareStatement(Queries.SELECT_PAPER_ISTOURIST);
                st.setLong(1, cardNumber);

                rs = st.executeQuery();

                rs.next();
                this.cardType = PAPER;
                this.isTourist = rs.getBoolean("isTourist");
            }

        } catch (SQLException ex) {
            System.out.println("ex = " + ex.getMessage());
            Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setActiveness() {

        if (getMode() == ADD_MODE) {
            cmbType.setEnabled(true);
            btnDelete.setVisible(false);
        } else {
            // edit mode
            cmbType.setEnabled(false);
            btnDelete.setVisible(true);

        }

        setProgramTableModel();
        tfCardNumber.setEnabled(false);
        btnSave.setEnabled(isOkToSave());
        btnDelete.setEnabled(isOkToDelete());
        btnAddProgram.setEnabled(isOkToAddProgram());
        modifyFormToCardType();
    }

    private void modifyFormToCardType() {
        if (this.cardType == OYSTER) {
            lblPicture.setVisible(true);
            btnBrowse.setVisible(true);
            chbIsTourist.setVisible(false);
        } else {
            // paper
            lblPicture.setVisible(false);
            btnBrowse.setVisible(false);
            chbIsTourist.setVisible(true);
        }
        setProgramTableModel();
        btnAddProgram.setEnabled(true);
    }

    private boolean isOkToSave() {
        if (tblPrograms.getModel().getRowCount() == 0) {
            btnDelete.setToolTipText("Creating the card is not allowed since it has no programs");
            return false;
        }
        btnSave.setToolTipText(null);
        return true;
    }

    private boolean isOkToAddProgram() {
        if (cardType == PAPER && tblPrograms.getModel().getRowCount() > 0) {
            btnAddProgram.setToolTipText("Paper card can have 1 program only");
            return false;
        }
        btnAddProgram.setToolTipText(null);
        return true;
    }

    private boolean isOkToDelete() {
        if (tblPrograms.getModel().getRowCount() == 0) {
            btnDelete.setToolTipText("Deleting the card is not allowed since it has programs");
            return false;
        }
        btnDelete.setToolTipText(null);
        return true;
    }

    private void insertNewCard() {
        PreparedStatement insertCard;
        PreparedStatement insertPaperCard;
        PreparedStatement insertOysterCard;
        PreparedStatement insertPaperProgram;
        PreparedStatement insertOysterProgram;
        long cNumber = 0;

        try {

            con.setAutoCommit(false);

            if (getMode() == ADD_MODE) {
                // add mode - get new card number from DB
                ResultSet rs = con.createStatement().executeQuery(Queries.SELECT_NEW_CARD);

                if (rs.isBeforeFirst()) {
                    // it is NOT the 1st card in the DB
                    rs.next();
                    cNumber = rs.getLong("number");
                } else {
                    // it IS the 1st card in the DB
                    cNumber = 1;
                }
            } else {
                // edit mode - use existing card number
                cNumber = cardNumber;
            }
            insertCard = con.prepareStatement(Queries.INSERT_CARD);
            insertCard.setLong(1, cNumber);
            insertCard.setTimestamp(2, getToday());
            insertCard.setString(3, MainClass.getUserData().getKey().toString());

            if (cardType == PAPER) {
                insertPaperCard = con.prepareStatement(Queries.INSERT_PAPER_CARD);
                insertPaperCard.setLong(1, cNumber);
                insertPaperCard.setTimestamp(2, getToday());
                insertPaperCard.setBoolean(3, isTourist);

                insertPaperProgram = con.prepareStatement(Queries.INSERT_PAPER_PROGRAM);
                setPrograms(insertPaperProgram, cNumber);

                insertCard.executeUpdate();
                insertPaperCard.executeUpdate();
                insertPaperProgram.executeUpdate();

            } else {
                // oyster card
                insertOysterCard = con.prepareStatement(Queries.INSERT_OYSTER_CARD);
                insertOysterCard.setLong(1, cNumber);
                insertOysterCard.setTimestamp(2, getToday());

                BufferedImage bi = getBufferedImage(picture.getImage());
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bi, "PNG", baos);
                byte[] byteArray = baos.toByteArray();
                insertOysterCard.setBytes(3, byteArray);

                insertOysterProgram = con.prepareStatement(Queries.INSERT_OYSTER_PROGRAM);
                setPrograms(insertOysterProgram, cNumber);

                insertCard.executeUpdate();
                insertOysterCard.executeUpdate();
                insertOysterProgram.executeBatch();
            }
            con.setAutoCommit(true);

            if (getMode() == ADD_MODE) {
                // a new card was inserted intentionally
                this.cardNumber = cNumber;
                updateTable(cardNumber);
                handleAddCardSuccess();
            } else {
                // a new card was inserted unintentionally (because of renewing a program)
                updateTable(cardNumber);
                handleAddProgramSuccess();
            }

        } catch (IOException ex) {
            // IOException
        } catch (SQLException e) {
            switch (e.getErrorCode()) {
                case 2627:
                    JOptionPane.showInternalMessageDialog(this,
                            "Somehow your card already exists in the database.\n"
                            + "Please try again or die.",
                            "Bummer!",
                            JOptionPane.ERROR_MESSAGE);
                    break;
                default:
                    JOptionPane.showInternalMessageDialog(this,
                            "Error code: " + e.getErrorCode() + ". Go figure it yourself!",
                            "Bummer!",
                            JOptionPane.ERROR_MESSAGE);
            }
            System.err.println("Error code: " + e.getErrorCode() + "\nError Message: " + e.getMessage());
            if (con != null) {
                try {
                    con.rollback();
                } catch (SQLException excep) {
                    System.err.println("Error code: " + e.getErrorCode() + "\nError Message: " + e.getMessage());
                }
            }
        } finally {
            try {
                con.setAutoCommit(true);

            } catch (SQLException ex) {
                Logger.getLogger(Card.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void handleAddProgramSuccess() {
        boolean isPrograms = tblPrograms.getRowCount() > 0;
        btnSave.setEnabled(isPrograms);
        btnAddProgram.setEnabled(cardType == OYSTER || !isPrograms);

        JOptionPane.showInternalMessageDialog(this,
                "You have succeeded to purchase a new program!\n"
                + "The programmer is a god-damn genious!!",
                "Hooray!",
                JOptionPane.PLAIN_MESSAGE);
    }

    private void handleAddCardSuccess() {
        setMode(EDIT_MODE);
        tfCardNumber.setText(String.valueOf(cardNumber));
        setActiveness();

        JOptionPane.showInternalMessageDialog(this,
                "Card was added successfully!\n"
                + "Your card number is " + cardNumber + ".\n"
                + "Now do something more useful with your life.",
                "Hooray!",
                JOptionPane.PLAIN_MESSAGE);
    }

    private void updateTable(long newCardNumber) throws SQLException {
        // updating the table with a new fill statement according to the new card number
        CustomTableModel tblModel = (CustomTableModel) tblPrograms.getModel();
        PreparedStatement fixedStmnt = tblModel.getFillStatement();
        fixedStmnt.setLong(1, newCardNumber);
        tblModel.setPreparedStatement(fixedStmnt);
        ((CustomTableModel) tblPrograms.getModel()).fillTable();
    }
}
