/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import utils.QueryCombobox;
import init.ComboItem;
import static init.MainClass.con;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Blob;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import utils.Column;
import static utils.Constants.ADD_MODE;
import static utils.Constants.EDIT_MODE;
import static utils.Constants.OYSTER;
import static utils.Constants.PAPER;
import utils.CustomTableModel;
import utils.Queries;

/**
 *
 * @author asus
 */
public class Card extends MyInternalFrame {

    private long cardNumber;
    private Timestamp purchaseDate;
    private boolean type;
    private ImageIcon picture;
    private JFileChooser picFileChooser;
    private boolean isTourist;

    /**
     * Creates new form Card
     *
     * @param title
     * @param type
     * @param cardNumber
     * @param purchaseDate
     */
    public Card(String title, String type, int cardNumber, Timestamp purchaseDate) {
        super(title, type);
        setMode(EDIT_MODE);
        this.cardNumber = cardNumber;
        this.purchaseDate = purchaseDate;
        setVariables();
        buildForm();
        setDefaults();
    }

    public Card(String title, String type) {
        super(title, type);
        setMode(ADD_MODE);
        this.purchaseDate = null;
        buildForm();

    }

    private void buildForm() {
        initComponents();
        try {

            picFileChooser = new JFileChooser();

            // set model to comboboxes
            PreparedStatement getAllCards = con.prepareStatement("SELECT number FROM tblCard");
            PreparedStatement getPurchaseDate = con.prepareStatement("SELECT purchaseDate FROM tblCard "
                    + "WHERE number = ?");
            PreparedStatement getAllCardLengths = con.prepareStatement("SELECT * FROM tblCardLengths");
            PreparedStatement getAllZones = con.prepareStatement("SELECT * FROM tblZone");

            cmbCard.setModel(new QueryCombobox(cmbCard, Integer.class, getAllCards));
            cmbPurchaseDate.setModel(new QueryCombobox(cmbPurchaseDate, cmbCard, Date.class, getPurchaseDate));

            cmbLength.setModel(new QueryCombobox(cmbLength, Integer.class, getAllCardLengths));
            cmbZone.setModel(new QueryCombobox(cmbZone, Integer.class, getAllZones));

            // set visibility and enablement
            setActiveness();

        } catch (SQLException ex) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pDetails = new javax.swing.JPanel();
        lblCardNumber = new javax.swing.JLabel();
        cmbCard = new javax.swing.JComboBox();
        lblPurchaseDate = new javax.swing.JLabel();
        cmbPurchaseDate = new javax.swing.JComboBox();
        lblType = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        chbIsTourist = new javax.swing.JCheckBox();
        btnBrowse = new javax.swing.JButton();
        lblPicture = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pPrograms = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrograms = new javax.swing.JTable();
        lblZone = new javax.swing.JLabel();
        lblLength = new javax.swing.JLabel();
        cmbZone = new javax.swing.JComboBox();
        cmbLength = new javax.swing.JComboBox();
        btnRemoveProgram = new javax.swing.JButton();
        btnAddProgram = new javax.swing.JButton();

        pDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        lblCardNumber.setText("Card Number");

        cmbCard.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCardActionPerformed(evt);
            }
        });

        lblPurchaseDate.setText("Purchase Date");

        cmbPurchaseDate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPurchaseDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPurchaseDateActionPerformed(evt);
            }
        });

        lblType.setText("Type");

        cmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Paper", "Oyster" }));
        cmbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTypeActionPerformed(evt);
            }
        });

        chbIsTourist.setText("Tourist");
        chbIsTourist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbIsTouristActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse Image");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pDetailsLayout = new javax.swing.GroupLayout(pDetails);
        pDetails.setLayout(pDetailsLayout);
        pDetailsLayout.setHorizontalGroup(
            pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pDetailsLayout.createSequentialGroup()
                                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCardNumber)
                                    .addComponent(lblPurchaseDate)
                                    .addComponent(lblType))
                                .addGap(18, 18, 18)
                                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbCard, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbPurchaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(chbIsTourist))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pDetailsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pDetailsLayout.setVerticalGroup(
            pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDetailsLayout.createSequentialGroup()
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBrowse))
                    .addGroup(pDetailsLayout.createSequentialGroup()
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCardNumber)
                            .addComponent(cmbCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPurchaseDate)
                            .addComponent(cmbPurchaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblType))
                        .addGap(18, 18, 18)
                        .addComponent(chbIsTourist)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(pDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        pPrograms.setBorder(javax.swing.BorderFactory.createTitledBorder("Programs"));

        tblPrograms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPrograms);

        lblZone.setText("Zone");

        lblLength.setText("Length");

        cmbZone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbLength.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnRemoveProgram.setText("Remove");
        btnRemoveProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveProgramActionPerformed(evt);
            }
        });

        btnAddProgram.setText("Add");
        btnAddProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProgramActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pProgramsLayout = new javax.swing.GroupLayout(pPrograms);
        pPrograms.setLayout(pProgramsLayout);
        pProgramsLayout.setHorizontalGroup(
            pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pProgramsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pProgramsLayout.createSequentialGroup()
                        .addComponent(btnRemoveProgram)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddProgram))
                    .addGroup(pProgramsLayout.createSequentialGroup()
                        .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLength)
                            .addComponent(lblZone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbLength, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbZone, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pProgramsLayout.setVerticalGroup(
            pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pProgramsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pProgramsLayout.createSequentialGroup()
                        .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblZone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLength))
                        .addGap(38, 38, 38)
                        .addGroup(pProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddProgram)
                            .addComponent(btnRemoveProgram)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pPrograms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pPrograms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCardActionPerformed
        try {
            ComboItem cardItem = (ComboItem) cmbCard.getSelectedItem();
            this.cardNumber = Integer.parseInt(cardItem.getKey().toString());
        } catch (NullPointerException ex) {
        }
    }//GEN-LAST:event_cmbCardActionPerformed

    private void cmbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTypeActionPerformed
        String strType = (String) cmbType.getSelectedItem();
        this.type = (strType.equals("Oyster")) ? OYSTER : PAPER;
        modifyFormToCardType();
    }//GEN-LAST:event_cmbTypeActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        int o = picFileChooser.showOpenDialog(this);
        if (o == JFileChooser.APPROVE_OPTION) {
            try {
                File f = picFileChooser.getSelectedFile();
                Path p = f.toPath();
                byte[] b = Files.readAllBytes(p);
                ImageIcon icon = getScaledImage(b);
                lblPicture.setIcon(icon);
                this.picture = icon;
            } catch (IOException ex) {
                Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnAddProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProgramActionPerformed
        String tableName = (this.type == PAPER) ? "tblPaperCardAreas" : "tblOysterCardAreas";
        ComboItem zoneItem;
        ComboItem lengthItem;
        int zone;
        double length;

        PreparedStatement st;
        try {
            zoneItem = (ComboItem) cmbZone.getSelectedItem();
            lengthItem = (ComboItem) cmbLength.getSelectedItem();
            zone = Integer.parseInt(zoneItem.getKey().toString());
            length = Double.valueOf(lengthItem.getKey().toString());

            st = con.prepareStatement("INSERT INTO " + tableName + " VALUES (?,?,?,?)");
            st.setLong(1, this.cardNumber);
            st.setTimestamp(2, this.purchaseDate);
            st.setInt(3, zone);
            st.setDouble(4, length);
//            st.executeUpdate();

//            ((CustomTableModel) tblPrograms.getModel()).addRow(new Object[]{zone, length});
        } catch (SQLException | NullPointerException ex) {
//            Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddProgramActionPerformed

    private void cmbPurchaseDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPurchaseDateActionPerformed
        ComboItem purchaseDateItem = (ComboItem) cmbPurchaseDate.getSelectedItem();
        this.purchaseDate = (Timestamp.valueOf(purchaseDateItem.getKey().toString()));
    }//GEN-LAST:event_cmbPurchaseDateActionPerformed

    private void btnRemoveProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveProgramActionPerformed
        String tableName = (this.type == PAPER) ? "tblPaperCardAreas" : "tblOysterCardAreas";
        ComboItem zoneItem;
        ComboItem lengthItem;
        int zone;
        double length;

        PreparedStatement st;
        try {
            zoneItem = (ComboItem) cmbZone.getSelectedItem();
            lengthItem = (ComboItem) cmbLength.getSelectedItem();
            zone = Integer.parseInt(zoneItem.getKey().toString());
            length = Double.valueOf(lengthItem.getKey().toString());

            st = con.prepareStatement("DELETE FROM " + tableName + " WHERE cardNumber = ? "
                    + "and cardPurchaseDate = ? and zoneNumber = ? and cardLength = ?");
            st.setLong(1, this.cardNumber);
            st.setTimestamp(2, this.purchaseDate);
            st.setInt(3, zone);
            st.setDouble(4, length);
            st.executeUpdate();

//            ((CustomTableModel) tblPrograms.getModel()).removeRow(tblPrograms.getSelectedRow());
        } catch (SQLException | NullPointerException ex) {
//            Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRemoveProgramActionPerformed

    private void chbIsTouristActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbIsTouristActionPerformed
        this.isTourist = chbIsTourist.isSelected();
    }//GEN-LAST:event_chbIsTouristActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
//        cancel();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        PreparedStatement insertCard;

        try {
            if (getMode() == ADD_MODE) {
                insertCard = con.prepareStatement(Queries.INSERT_CARD);
                insertCard.setLong(1, cardNumber);
                insertCard.setTimestamp(2, purchaseDate);
                insertCard.executeUpdate();

            } 
            
            JOptionPane.showInternalMessageDialog(this,
                    "Card was added successfully!",
                    "Hooray!",
                    JOptionPane.PLAIN_MESSAGE);

            setMode(EDIT_MODE);
            setActiveness();
        } catch (SQLException e) {
            switch (e.getErrorCode()) {
                case 2627:
                    if (getMode() == ADD_MODE && e.getMessage().contains("tblLine")) {
                        JOptionPane.showInternalMessageDialog(this,
                                "Sorry but the name \"" + cardNumber + "\" is already taken. Please be original.",
                                "Bummer!",
                                JOptionPane.ERROR_MESSAGE);
                    }

                    if (e.getMessage().contains("tblColor")) {
                        JOptionPane.showInternalMessageDialog(this,
                                "Sorry but the color \"" + cardNumber + "\" is already taken. Please be original.",
                                "Bummer!",
                                JOptionPane.ERROR_MESSAGE);
                    }

                    break;
                default:
                    JOptionPane.showInternalMessageDialog(this,
                            "Error code: " + e.getErrorCode() + ". Go figure it yourself!",
                            "Bummer!",
                            JOptionPane.ERROR_MESSAGE);
            }
            System.err.println("Error code: " + e.getErrorCode() + "\nError Message: " + e.getMessage());
            if (con != null) {
                try {
                    con.rollback();
                } catch (SQLException excep) {
                    System.err.println("Error code: " + e.getErrorCode() + "\nError Message: " + e.getMessage());
                }
            }
        } finally {
            try {
                con.setAutoCommit(true);
            } catch (SQLException ex) {
                Logger.getLogger(Line.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProgram;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRemoveProgram;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chbIsTourist;
    private javax.swing.JComboBox cmbCard;
    private javax.swing.JComboBox cmbLength;
    private javax.swing.JComboBox cmbPurchaseDate;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JComboBox cmbZone;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCardNumber;
    private javax.swing.JLabel lblLength;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JLabel lblPurchaseDate;
    private javax.swing.JLabel lblType;
    private javax.swing.JLabel lblZone;
    private javax.swing.JPanel pDetails;
    private javax.swing.JPanel pPrograms;
    private javax.swing.JTable tblPrograms;
    // End of variables declaration//GEN-END:variables

    private void setProgramTableModel() {

        ArrayList<Column> cols = new ArrayList<>();
        cols.add(new Column("#", "#", Integer.class)); //*UNBOUND to DB - displays row num*/
        cols.add(new Column("Zone", "zoneNumber", Integer.class));
        cols.add(new Column("Length", "cardLength", Double.class));

        PreparedStatement getAllPrograms;
        CustomTableModel programTblModel;

        try {
            getAllPrograms = (this.type == PAPER)
                    ? con.prepareStatement(Queries.SELECT_PAPER_PROGRAMS_AND_LENGTH_OF_CARD)
                    : con.prepareStatement(Queries.SELECT_OYSTER_PROGRAMS_AND_LENGTHS_OF_CARD);

            getAllPrograms.setLong(1, this.cardNumber);
            getAllPrograms.setTimestamp(2, this.purchaseDate);

            programTblModel = new CustomTableModel(tblPrograms, cols, getAllPrograms);

            HashSet<JButton> tableButtons = new HashSet<>();
            tableButtons.add(btnRemoveProgram);
            programTblModel.bindButtons(tableButtons);

            tblPrograms.setModel(programTblModel);
            programTblModel.fillTable();

            btnDelete.setEnabled(isOkToDelete());
        } catch (SQLException ex) {

        }
    }
//        try {
//            String tableName = this.type == PAPER ? "tblPaperCardAreas" : "tblOysterCardAreas";
//            st = con.prepareStatement("SELECT * FROM " + tableName + " As CA "
//                    + "JOIN tblCardLengths As CL on CA.cardLength = CL.lengthDescription "
//                    + "WHERE CA.cardNumber = ? and CA.cardPurchaseDate = ?");
//            st.setInt(1, this.cardNumber);
//            st.setTimestamp(2, this.purchaseDate);
//            rs = st.executeQuery();
//            ArrayList<Object[]> rows = new ArrayList();
//            
//            int i = 0;
//            while (rs.next()) {
//                Object[] row = {i, rs.getInt("zoneNumber"), rs.getString("lengthDescription")};
//                rows.add(row);
//                i++;
//            }
//            MyTableModel tableModel = new MyTableModel(programColumns, rows, null);
//            tblPrograms.setModel(tableModel);
//
//        } catch (SQLException ex) {
//            Logger.getLogger(Card.class
//                    .getName()).log(Level.SEVERE, null, ex);
//        }
//    }

    private void setDefaults() {
//        int defaultCard = Integer.valueOf(((ComboItem) cmbCard.getSelectedItem())
//                .getKey().toString());
//        ((QueryCombobox)cmbPurchaseDate.getModel()).fill(defaultCard);
//        ((QueryCombobox)cmbCard.getModel()).fill(cardNumber);

        cmbCard.getModel().setSelectedItem(this.cardNumber);
        cmbPurchaseDate.setSelectedItem(String.valueOf(this.purchaseDate));

        cmbType.setSelectedItem((this.type == PAPER) ? "Paper" : "Oyster");
        // TODO: get picture from DB

        if (this.type == OYSTER) {
            lblPicture.setIcon(this.picture); //TODO: CHECK THIS
        } else {
            // paper
            chbIsTourist.setSelected(this.isTourist);
        }
    }

    private Image scaleIamge(Image img, int w, int h) {

        BufferedImage resizeImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = resizeImage.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
        g.drawImage(img, 0, 0, w, h, null);
        g.dispose();
        return resizeImage;

    }

    private ImageIcon getScaledImage(byte[] blobAsBytes) {
        try {
            BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(blobAsBytes));
            if (bufferedImage != null) {
                ImageIcon resized = new ImageIcon(scaleIamge(bufferedImage, 120, 110));

                return resized;
            }
            return null;
        } catch (IOException ex) {
            Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    private void setVariables() {
        PreparedStatement st;
        ResultSet rs;
        try {
            st = con.prepareStatement(Queries.SELECT_OYSTER_PICTURE);
            st.setLong(1, cardNumber);
            st.setString(2, this.purchaseDate.toString());

            rs = st.executeQuery();

            if (rs.isBeforeFirst()) {
                // result set not empty - the card is Oyster

                rs.next();
                this.type = OYSTER;

                Blob blob = rs.getBlob("picture");
                int blobLength = (int) blob.length();
                byte[] blobAsBytes = blob.getBytes(1, blobLength);
                this.picture = getScaledImage(blobAsBytes);

            } else {
                // result set is empty - the card is Paper
                st = con.prepareStatement(Queries.SELECT_PAPER_ISTOURIST);
                st.setLong(1, cardNumber);
                st.setString(2, this.purchaseDate.toString());

                rs = st.executeQuery();

                rs.next();
                this.type = PAPER;
                this.isTourist = rs.getBoolean("isTourist");
            }

        } catch (SQLException ex) {
            System.out.println("ex = " + ex.getMessage());
            Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setActiveness() {

        if (getMode() == ADD_MODE) {
            cmbType.setEnabled(true);
            pPrograms.setVisible(false);
            btnDelete.setVisible(false);
        } else {
            // edit mode
            cmbType.setEnabled(false);
            pPrograms.setVisible(true);
            btnDelete.setVisible(true);
            setProgramTblModel();
        }
        cmbCard.setEnabled(false);
        cmbPurchaseDate.setEnabled(false);

        btnSave.setEnabled(isOkToSave());
        btnSave.setEnabled(isOkToDelete());
        modifyFormToCardType();
    }

    private void modifyFormToCardType() {
        if (this.type == OYSTER) {
            lblPicture.setVisible(true);
            btnBrowse.setVisible(true);
            chbIsTourist.setVisible(false);
        } else {
            // paper
            lblPicture.setVisible(false);
            btnBrowse.setVisible(false);
            chbIsTourist.setVisible(true);
        }
        setProgramTableModel();
    }

    private boolean isOkToSave() {
        return true;
    }

    private boolean isOkToDelete() {
        if (tblPrograms.getModel().getRowCount() == 0) {
            btnDelete.setToolTipText("Deleting the card is not allowed since it has programs");
            return false;
        }
        return true;
    }

    private void setProgramTblModel() {
        return;
    }
}
