/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import static init.MainClass.con;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import static utils.Constants.EDIT_MODE;
import utils.HelperClass;
import utils.Queries;

/**
 *
 * @author asus
 */
public class Deposits extends MyInternalFrame {

    private Short fromYear;
    private Short toYear;
    private Short price;

    /**
     * Creates new form GeneralParameters
     *
     * @param title
     * @param type
     */
    public Deposits(String title, String type) {
        super(title, type);
        setMode(EDIT_MODE);
        initComponents();

        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);

        // set document listeners
        JSpinner toYearSpinner = (JSpinner) ychTo.getSpinner();
        JTextField toYearText = (JTextField) toYearSpinner.getEditor();
        toYearText.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                toYear = Short.valueOf(toYearText.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                toYear = Short.valueOf(toYearText.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });

        JSpinner fromYearSpinner = (JSpinner) ychFrom.getSpinner();
        JTextField fromYearText = (JTextField) fromYearSpinner.getEditor();
        toYearText.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    fromYear = Short.valueOf(toYearText.getText());
                } catch (NumberFormatException ex) {
                    fromYear = null;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    fromYear = Short.valueOf(toYearText.getText());
                } catch (NumberFormatException ex) {
                    fromYear = null;
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });

        JSpinner.NumberEditor priceEditor = (JSpinner.NumberEditor) spnPrice.getEditor();
        JTextField priceTextField = priceEditor.getTextField();
        priceTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                try{
                    price = Short.parseShort(priceTextField.getText());
                } catch (NumberFormatException ex){
                    price = null;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try{
                    price = Short.parseShort(priceTextField.getText());
                } catch (NumberFormatException ex){
                    price = null;
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });

        // set year choosers
        initYearChoosers();

        // set table model and listener
        fillDeposits();
        tblDeposits.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                boolean isRowSelected = tblDeposits.getSelectedRow() != -1;
                btnDelete.setEnabled(isRowSelected);
                btnUpdate.setEnabled(isRowSelected);

                if (isRowSelected) {
                    int selectedRow = tblDeposits.getSelectedRow();
                    tfValueToUpdate.setText(tblDeposits.getModel().getValueAt(selectedRow, 2).toString());
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pAddDeposit = new javax.swing.JPanel();
        lblFrom = new javax.swing.JLabel();
        ychFrom = new com.toedter.calendar.JYearChooser();
        ychTo = new com.toedter.calendar.JYearChooser();
        btnAdd = new javax.swing.JButton();
        lblIs = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        spnPrice = new javax.swing.JSpinner();
        pDepositHistory = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDeposits = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        tfValueToUpdate = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();

        pAddDeposit.setBorder(javax.swing.BorderFactory.createTitledBorder("Add Deposit"));
        pAddDeposit.setName(""); // NOI18N

        lblFrom.setText("Deposit from");

        ychFrom.setEndYear(Short.MAX_VALUE);

        ychTo.setEndYear(Short.MAX_VALUE);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblIs.setText("is");

        lblTo.setText("to");

        spnPrice.setModel(new javax.swing.SpinnerNumberModel(Short.valueOf((short)0), Short.valueOf((short)0), Short.valueOf((short)32767), Short.valueOf((short)1)));

        javax.swing.GroupLayout pAddDepositLayout = new javax.swing.GroupLayout(pAddDeposit);
        pAddDeposit.setLayout(pAddDepositLayout);
        pAddDepositLayout.setHorizontalGroup(
            pAddDepositLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAddDepositLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pAddDepositLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pAddDepositLayout.createSequentialGroup()
                        .addComponent(lblFrom)
                        .addGap(12, 12, 12)
                        .addComponent(ychFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ychTo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblIs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pAddDepositLayout.setVerticalGroup(
            pAddDepositLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAddDepositLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pAddDepositLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pAddDepositLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblIs)
                        .addComponent(spnPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTo)
                    .addComponent(lblFrom)
                    .addComponent(ychTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ychFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdd)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pDepositHistory.setBorder(javax.swing.BorderFactory.createTitledBorder("Deposit History"));

        tblDeposits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDeposits);

        btnDelete.setText("Remove");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pDepositHistoryLayout = new javax.swing.GroupLayout(pDepositHistory);
        pDepositHistory.setLayout(pDepositHistoryLayout);
        pDepositHistoryLayout.setHorizontalGroup(
            pDepositHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDepositHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pDepositHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(pDepositHistoryLayout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addGap(106, 106, 106)
                        .addComponent(tfValueToUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pDepositHistoryLayout.setVerticalGroup(
            pDepositHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDepositHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pDepositHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate)
                    .addComponent(tfValueToUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pAddDeposit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pDepositHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pAddDeposit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pDepositHistory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        int choice = JOptionPane.showInternalOptionDialog(this,
                "Removing a deposit from the past will result consistency issues.\n"
                + "Are yaur sure you want to proceed?",
                "Bummer!", JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE, null, null, null);
        if (choice == JOptionPane.NO_OPTION) {
            return;
        }

        try {

            PreparedStatement st = con.prepareStatement(Queries.DELETE_DEPOSIT);
            st.setInt(1, fromYear);
            st.setInt(2, toYear);
            st.executeUpdate();

            initYearChoosers();
            fillDeposits();

            JOptionPane.showInternalMessageDialog(this,
                    "Deposit was removed successfully.",
                    "Hooray!",
                    JOptionPane.PLAIN_MESSAGE);

        } catch (SQLException ex) {
            Logger.getLogger(Deposits.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        PreparedStatement st;

        try {

            st = con.prepareStatement(Queries.INSERT_DEPOSIT);
            st.setInt(1, fromYear);
            st.setInt(2, toYear);
            st.setDouble(3, this.price);
            st.executeUpdate();

            initYearChoosers();
            fillDeposits();

            JOptionPane.showInternalMessageDialog(this,
                    "Deposit was added successfully.",
                    "Hooray!",
                    JOptionPane.PLAIN_MESSAGE);

        } catch (SQLException | NullPointerException ex) {
//            Logger.getLogger(Station.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {

            PreparedStatement st = con.prepareStatement(Queries.UPDATE_DEPOSIT);
            st.setShort(1, price);
            st.setInt(1, fromYear);
            st.setInt(2, toYear);
            st.executeUpdate();

            initYearChoosers();
            fillDeposits();

            JOptionPane.showInternalMessageDialog(this,
                    "Deposit was updated successfully.",
                    "Hooray!",
                    JOptionPane.PLAIN_MESSAGE);

        } catch (SQLException ex) {
            Logger.getLogger(Deposits.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblIs;
    private javax.swing.JLabel lblTo;
    private javax.swing.JPanel pAddDeposit;
    private javax.swing.JPanel pDepositHistory;
    private javax.swing.JSpinner spnPrice;
    private javax.swing.JTable tblDeposits;
    private javax.swing.JTextField tfValueToUpdate;
    private com.toedter.calendar.JYearChooser ychFrom;
    private com.toedter.calendar.JYearChooser ychTo;
    // End of variables declaration//GEN-END:variables

    private void fillDeposits() {
        try {
            Statement s = con.createStatement();
            ResultSet rs = s.executeQuery(Queries.SELECT_ALL_DEPOSITS);
            tblDeposits.setModel(HelperClass.buildTableModel(rs));
        } catch (SQLException e) {

        }
    }

    private void initYearChoosers() {
        try {
            Statement s = con.createStatement();
            ResultSet rs = s.executeQuery(Queries.NEXT_DEPOSIT_YEAR);
            rs.next();
            int nextDepositYear = rs.getInt("next year");

            ychFrom.setStartYear(nextDepositYear);
            ychTo.setStartYear(nextDepositYear + 1);

            ychFrom.setYear(nextDepositYear);
            ychTo.setYear(nextDepositYear + 1);

            ychFrom.setEnabled(false);
        } catch (SQLException e) {
            System.err.println("Error code: " + e.getErrorCode() + "\nError Message: " + e.getMessage());
        }
    }
}
