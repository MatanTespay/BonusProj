/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import init.ComboItem;
import static init.MainClass.con;
import init.MyTableModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;

/**
 *
 * @author asus
 */
public class Site extends MyInternalFrame {

    int siteID;
    String[] SFEColumns = {
        "ID",
        "Station Name",
        "Line Name",
        "Distance"};

    String[] SFSColumns = {
        "ID",
        "Name",
        "Foundation Year",
        "Type",
        "Distance"};
        
    /**
     * Creates new form Site
     *
     * @param title
     * @param type
     * @param siteID
     */
    public Site(String title, String type, int siteID) {
        super(title, type);
        this.siteID = siteID;
        initComponents();
        fillCmbType();

        boolean isViewable = (siteID != 0);
        lblNearbyExits.setVisible(isViewable);
        lblNearbySites.setVisible(isViewable);
        tblNearbyExits.setVisible(isViewable);
        tblNearbySites.setVisible(isViewable);

        if (siteID != 0) {
            fillNearByExits();
            fillNearBySites();
            fillFields();
            tblNearbyExits.setRowSelectionAllowed(true);
            tblNearbyExits.setColumnSelectionAllowed(false);
            tblNearbyExits.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tblNearbySites.setRowSelectionAllowed(true);
            tblNearbySites.setColumnSelectionAllowed(false);
            tblNearbySites.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfName = new javax.swing.JTextField();
        lblDescription = new javax.swing.JLabel();
        tfID = new javax.swing.JTextField();
        lblFoundation = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        Type = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        ycFoundation = new com.toedter.calendar.JYearChooser();
        cmbType = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNearbyExits = new javax.swing.JTable();
        lblNearbyExits = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblNearbySites = new javax.swing.JTable();
        lblNearbySites = new javax.swing.JLabel();

        tfName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNameActionPerformed(evt);
            }
        });

        lblDescription.setText("Description");

        tfID.setEnabled(false);

        lblFoundation.setText("Foundation Year");

        lblID.setText("Site ID");

        lblName.setText("Name");

        Type.setText("Type");

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        cmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tblNearbyExits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblNearbyExits);

        lblNearbyExits.setText("Nearby Exits");

        tblNearbySites.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblNearbySites);

        lblNearbySites.setText("Nearby Sites");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblID)
                            .addComponent(lblName))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfName, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(tfID))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFoundation)
                            .addComponent(Type))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ycFoundation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNearbySites)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNearbyExits)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDescription)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(ycFoundation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName)
                            .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Type)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFoundation)
                        .addGap(35, 35, 35)))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescription))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNearbyExits))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNearbySites))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Type;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblFoundation;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNearbyExits;
    private javax.swing.JLabel lblNearbySites;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tblNearbyExits;
    private javax.swing.JTable tblNearbySites;
    private javax.swing.JTextField tfID;
    private javax.swing.JTextField tfName;
    private com.toedter.calendar.JYearChooser ycFoundation;
    // End of variables declaration//GEN-END:variables

    private void fillFields() {
        PreparedStatement st;
        ResultSet rs;
        try {
            st = con.prepareStatement("Select * From tblSite As S WHERE S.ID = ?");
            st.setInt(1, siteID);
            rs = st.executeQuery();

            rs.next();
            tfName.setText(rs.getString("name"));
            tfID.setText(rs.getString("ID"));
            taDescription.setText(rs.getString("siteDescription"));
            ycFoundation.setYear(rs.getInt("foundedYear"));
            for (int i = 0 ; i < cmbType.getModel().getSize() ; i++){
                Object item = cmbType.getModel().getElementAt(i);
                if (item != null && ((ComboItem)item).getValue().equals(rs.getString("siteType"))){
                    cmbType.setSelectedIndex(i);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Site.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillCmbType() {
        Statement s;
        ResultSet rs;
        try {
            s = con.createStatement();
            rs = s.executeQuery("Select * From tblSiteType");
            ArrayList<ComboItem> items = new ArrayList<>();
            while (rs.next()) {
                items.add(new ComboItem(rs.getString("siteType"), rs.getString("siteType")));
            }
            Collections.sort(items);
            items.add(0, null);
            cmbType.setModel(new javax.swing.DefaultComboBoxModel(items.toArray()));
        } catch (SQLException ex) {
            Logger.getLogger(Site.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillNearByExits() {
        PreparedStatement st;
        ResultSet rs;
        try {
            st = con.prepareStatement("Select * From tblSiteFromExit As SFE "
                    + "join tblStation As S on SFE.stationID = S.ID WHERE SFE.siteID = ? ");
            st.setInt(1, siteID);
            rs = st.executeQuery();
            ArrayList<Object[]> rows = new ArrayList();
            while (rs.next()) {
                Object[] row = {rs.getString("stationID"), rs.getString("name")/*station name*/,
                    rs.getString("lineName"), rs.getString("distance")};
                rows.add(row);
            }
            MyTableModel tableModel = new MyTableModel(SFEColumns, rows, null);
            tblNearbyExits.setModel(tableModel);

        } catch (SQLException ex) {
            Logger.getLogger(Site.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillNearBySites() {
        PreparedStatement st;
        ResultSet rs;
        try {
            st = con.prepareStatement("SELECT * FROM tblSiteFromSite As SFS "
                    + "join tblSite As S on SFS.siteID2 = S.ID WHERE S.ID = ?");
            st.setInt(1, siteID);
            rs = st.executeQuery();
            ArrayList<Object[]> rows = new ArrayList();
            while (rs.next()) {
                Object[] row = {rs.getString("siteID2"), rs.getString("name"),
                    rs.getString("foundedYear"), rs.getString("siteType"),
                    rs.getString("distance")};
                rows.add(row);
            }
            MyTableModel tableModel = new MyTableModel(SFSColumns, rows, null);
            tblNearbySites.setModel(tableModel);

        } catch (SQLException ex) {
            Logger.getLogger(Site.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }
}
