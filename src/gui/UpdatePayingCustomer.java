/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import init.ComboItem;
import init.MainClass;
import init.MethodInterface;
import init.MyTableModel;

import java.awt.Dimension;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Map;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import utils.HelperClass;
import core.Customer;
import core.Order;
import exceptions.PayingCustomerExeption;

/**
  *The class represents the screen which enable users to update the payment for the {@link core.Order} for the {@link core.Customer}
 
 * @author Matan
 */
public class UpdatePayingCustomer extends MyInternalFrame implements MethodInterface {

    AbstractMap.SimpleEntry<Customer, ArrayList<Order>> data;
    String payCust;
    int orderNumber;
    String[] columnNames = {"Order #",
        "<html><center>Agent<br>Name</html>",
        "Cost",
        "Is Paid"};
    private static int HEADER_HEIGHT = 32;

    /**
     * Creates new form UpdatePayingCustomer
     */
    public UpdatePayingCustomer(String title, String type) {
        super(title, type, null);
        initComponents();
        cbOrders.setVisible(false);
        txtselectOrder.setVisible(false);
        fillData();
        btnOK.setToolTipText(utils.Constants.saveButtonToolTip);
        
        ListSelectionModel selectionModel = tblOrders.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!e.getValueIsAdjusting())
                processSelection(tblOrders);
            }
        });               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCustomer = new javax.swing.JLabel();
        cbCustomers = new javax.swing.JComboBox();
        txtselectOrder = new javax.swing.JLabel();
        cbOrders = new javax.swing.JComboBox();
        btnOK = new javax.swing.JButton();
        lblNoOrders = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();

        lblCustomer.setText("Select Customer:");

        cbCustomers.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCustomersActionPerformed(evt);
            }
        });

        txtselectOrder.setText("Select Order:");

        btnOK.setText("Submit");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        jLabel1.setText("Balance:");

        jScrollPane2.setViewportView(tblOrders);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtselectOrder)
                                .addGap(33, 33, 33))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblCustomer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cbCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNoOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCustomer)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbOrders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtselectOrder))
                .addGap(24, 24, 24)
                .addComponent(lblNoOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnOK)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCustomersActionPerformed
        // TODO add your handling code here:
        JComboBox cb = (JComboBox) evt.getSource();
        if (cb.getModel().getSize() <= 0 || selectedCustomer == null) {
            return;
        }

        ComboItem item = (ComboItem) cb.getSelectedItem();
        AbstractMap.SimpleEntry c = null;
        for (Map.Entry<String, Customer> tempc : MainClass.getIfly().getCustomers().entrySet()) {
            if (tempc.getKey().equals(item.getValue())) {
                selectedCustomer = new AbstractMap.SimpleEntry(tempc.getKey(), tempc.getValue());
                break;
            }
        }
        double balance = ((Customer) selectedCustomer.getValue()).getBalance();
        lblBalance.setText(String.format("%.2f", balance));
        btnOK.setEnabled(false);
        fillTable();


    }//GEN-LAST:event_cbCustomersActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed

        saveChanges();
    }//GEN-LAST:event_btnOKActionPerformed

    /**
     * fired on table selection, sets the state of the save button and the order information
     * @param table
     */
    private void processSelection(JTable table){
          boolean isPsid;
        if (table == null || selectedCustomer == null) {
            return;
        }

        int numRows = table.getRowCount();
        int numCols = table.getColumnCount();
        javax.swing.table.TableModel model = table.getModel();

        for (int i = 0; i < numRows; i++) {
            if (table.getSelectedRow() == i) {

                orderNumber = Integer.parseInt(model.getValueAt(i, 0).toString());
                double cost = Double.parseDouble(model.getValueAt(i, 2).toString());
                isPsid = model.getValueAt(i, 3).toString().equals("Yes");

                if (cost == 0) {
                    btnOK.setEnabled(false);
                } else {
                    if (isPsid) {
                        btnOK.setEnabled(false);
                    } else {
                        double balance = ((Customer) selectedCustomer.getValue()).getBalance();
                        if (balance - cost < 0) {
                            btnOK.setEnabled(false);
                        } else {
                            btnOK.setEnabled(true);
                        }
                    }
                }

                break;

            }
        }
    }



    private void fillData() {
        fillComboCustomers();

        fillTable();
    }

    /**
     * fill {@link #cbCustomers}}
     */
    private void fillComboCustomers() {
        ComboItem[] items;

        if (!selectedUserType.equals("Customer")) {
            //txtRating.setText("" + c.getRating() + "");
            Map<String, Customer> customers = MainClass.getIfly().getCustomers();

            items = new ComboItem[customers.size()];

            //String[] cs = new String[customers.size()];
            int idx = 0;
            for (Map.Entry<String, Customer> entry : customers.entrySet()) {
                items[idx] = new ComboItem(entry.getKey(), entry.getValue().getFirstName() + " " + entry.getValue().getLastName());
                if (idx == 0) {
                    selectedCustomer = new AbstractMap.SimpleEntry(entry.getKey(), entry.getValue());
                }

                idx++;
            }

            cbCustomers.setModel(new javax.swing.DefaultComboBoxModel(items));
            if (selectedCustomer != null) {
                Customer c = ((Customer) selectedCustomer.getValue());

                lblBalance.setText(String.format("%.2f", c.getBalance()));
            }
        } else {
            selectedCustomer = MainClass.getUserData();
            lblCustomer.setVisible(false);
            cbCustomers.setVisible(false);

        }
    }

    /**
     * fill {@link #cbCustomers}}
     */
    private void fillComboOrdrs() {

        if (selectedCustomer != null) {
            data = MainClass.getIfly()
                    .getOrdersforOwner(selectedCustomer.getKey().toString());
            ComboItem[] items;

            if (!data.getValue().isEmpty()) {
                items = new ComboItem[data.getValue().size()];
                for (int i = 0; i < data.getValue().size(); i++) {
                    int number = data.getValue().get(i).getOrderNumber();
                    items[i] = new ComboItem("" + number + "", "" + number + "");

                }

            } else {
                items = new ComboItem[1];
                items[0] = new ComboItem("-1", "No Orders");
            }

            cbOrders.setModel(new javax.swing.DefaultComboBoxModel(items));
        }
    }

    private void fillTable() {

        if (selectedCustomer != null) {
            String fullName = ((ComboItem)cbCustomers.getSelectedItem()).getLabel();
            data = MainClass.getIfly()
                    .getOrdersforOwner(selectedCustomer.getKey().toString());
            int rowsNum;
            ArrayList<Order> o;
            if (data != null) {
                o = data.getValue();
                rowsNum = o.size();
                DefaultTableModel dfModel = new DefaultTableModel(columnNames, 0);
                MyTableModel tableModel = null;

                Object[][] alm;
                ArrayList<Object[]> oal;
                if (rowsNum > 0) {
                    //Object[][] d = new Object[rowsNum][columnNames.length];
                    alm = new Object[rowsNum][];
                    oal = new ArrayList<>();
                    for (int i = 0; i < o.size(); i++) {

                        Order order = o.get(i);
                        Object[] row = {order.getOrderNumber(),
                            order.getAgent().getFirstName() + " " + order.getAgent().getLastName(), String.format("%.2f", order.getOrderCost()), order.isPaid() == true ? "Yes" : "No"};

                        alm[i] = row;
                        oal.add(row);

                    }

                    if (alm[0] != null) {
                        lblNoOrders.setText("");
                        tableModel = new MyTableModel(columnNames, oal, null);
                        tblOrders.setModel(tableModel);
                        HelperClass.aligmentCell(tblOrders);

                    } else {
                        lblNoOrders.setText(fullName + " has no orders to show");
                        tblOrders.setModel(dfModel);

                    }

                } else {

                    lblNoOrders.setText(fullName + " has no orders to show");
                    tblOrders.setModel(dfModel);

                }

                tblOrders.setFillsViewportHeight(true);
                tblOrders.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            }
        }

        tblOrders.setTableHeader(new JTableHeader(tblOrders.getColumnModel()) {
            @Override
            public Dimension getPreferredSize() {
                Dimension d = super.getPreferredSize();
                d.height = HEADER_HEIGHT;
                return d;
            }
        });
        HelperClass.aligmentCell(tblOrders);

        btnOK.setEnabled(false);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JComboBox cbCustomers;
    private javax.swing.JComboBox cbOrders;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblCustomer;
    private javax.swing.JLabel lblNoOrders;
    private javax.swing.JTable tblOrders;
    private javax.swing.JLabel txtselectOrder;
    // End of variables declaration//GEN-END:variables

    /* (non-Javadoc)
     * @see init.MethodInterface#saveChanges()
     */
    @Override
    public void saveChanges() {
        try {
            // TODO add your handling code here:
            if (selectedCustomer == null || cbCustomers.getModel().getSize() <= 0) {
                return;
            }
            Object id = tblOrders.getValueAt(tblOrders.getSelectedRow(), 0);
            payCust = ((ComboItem) cbCustomers.getSelectedItem()).getValue();
            orderNumber = Integer.parseInt(id.toString());
            boolean res = MainClass.getIfly().associateCustomerPayingOrder(orderNumber, payCust);
            fillTable();
            tblOrders.clearSelection();
            btnOK.setEnabled(false);
            double balance = ((Customer) selectedCustomer.getValue()).getBalance();
            lblBalance.setText(String.format("%.2f", balance));
            JOptionPane.showInternalConfirmDialog(this, "Saved changes", "Confirmation", JOptionPane.PLAIN_MESSAGE, JOptionPane.INFORMATION_MESSAGE);
            setIflyState(false);
        } catch (PayingCustomerExeption e) {
            JOptionPane.showInternalConfirmDialog(this, e.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public boolean checkField(DocumentEvent e) {
        return true;
    }

}
